<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>araska-tower-nuked</title>
    <link href="/2023/08/20/araska-tower-nuked/"/>
    <url>/2023/08/20/araska-tower-nuked/</url>
    
    <content type="html"><![CDATA[<h1 id="Arasaka"><a href="#Arasaka" class="headerlink" title="Arasaka"></a>Arasaka</h1><h2 id="At-2077"><a href="#At-2077" class="headerlink" title="At 2077"></a>At 2077</h2><img src="/2023/08/20/araska-tower-nuked/2077.png" class="" width="2077"><p><br><br><br><br><br></p><h2 id="At-2023"><a href="#At-2023" class="headerlink" title="At 2023"></a>At 2023</h2><img src="/2023/08/20/araska-tower-nuked/2023.jpg" class="" width="2023">]]></content>
    
    
    
    <tags>
      
      <tag>CyberPunk2077</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记3</title>
    <link href="/2023/08/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <url>/2023/08/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</url>
    
    <content type="html"><![CDATA[<h1 id="Variables-变量"><a href="#Variables-变量" class="headerlink" title="Variables 变量"></a>Variables 变量</h1><p>根据codecademy的描述，在js里你能对变量完成以下操作</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">Create a variable with a descriptive name.<br><br>Store or update information stored in a variable.<br><br>Reference or “get” information stored in a variable.<br></code></pre></td></tr></table></figure><p>分别是创建一个拥有合法的名字的变量，储存或更新变量里的值，引用或获取变量里的值<br><br>本章节将会学习三种js变量<code>var let const</code></p><h2 id="Var"><a href="#Var" class="headerlink" title="Var"></a>Var</h2><p>var的基础用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> myName = <span class="hljs-string">&#x27;John Cena&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myName);<br><span class="hljs-comment">// Output: John Cena</span><br></code></pre></td></tr></table></figure><p>var可以储存字符，字符串，和数字。<br><br>var是js里的关键字，myName是变量的名称，js有一种标准的变量命名方法，叫驼峰命名法，原文如下</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">myName is the variable’s name. Capitalizing in this way is a standard convention in JavaScript called camel casing. In camel casing you group words into one, the first word is lowercase, then every word that follows will have its first letter uppercased. (e.g. camelCaseEverything).<br></code></pre></td></tr></table></figure><p><strong>js和别的语言一样，变量名称不能有关键字(keyword)</strong><br><br>别的没什么好注意的，和c like语言差不多一样。</p><h2 id="Let"><a href="#Let" class="headerlink" title="Let"></a>Let</h2><p>let可以是变量的值被重新分配，如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> meal = <span class="hljs-string">&#x27;Enchiladas&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(meal); <span class="hljs-comment">// Output: Enchiladas</span><br>meal = <span class="hljs-string">&#x27;Burrito&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(meal); <span class="hljs-comment">// Output: Burrito</span><br></code></pre></td></tr></table></figure><p><strong>注意</strong>，js里当你命名了一个变量后却没有给他赋值，它会被自动赋值为undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> price;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(price); <span class="hljs-comment">// Output: undefined</span><br>price = <span class="hljs-number">350</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(price); <span class="hljs-comment">// Output: 350</span><br></code></pre></td></tr></table></figure><h2 id="Const"><a href="#Const" class="headerlink" title="Const"></a>Const</h2><p>就像c like语言一样，const是常量<br><br>第一次被赋值以后就不可以被改变了，如果强行改变你会收到TypeError,如<br><br><code>TypeError: Assignment to constant variable</code><br><br><del>作者个人观点,js里的变量真的好怪</del></p><h2 id="Mathematical-Assignment-Operators-对变量里的值进行数学运算"><a href="#Mathematical-Assignment-Operators-对变量里的值进行数学运算" class="headerlink" title="Mathematical Assignment Operators 对变量里的值进行数学运算"></a>Mathematical Assignment Operators 对变量里的值进行数学运算</h2><p>一个简单例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> w = <span class="hljs-number">4</span>;<br>w = w + <span class="hljs-number">1</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(w); <span class="hljs-comment">// Output: 5</span><br></code></pre></td></tr></table></figure><p>另一种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> w = <span class="hljs-number">4</span>;<br>w += <span class="hljs-number">1</span>;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(w); <span class="hljs-comment">// Output: 5</span><br></code></pre></td></tr></table></figure><p>有手就会，不解释<br><br>一个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> levelUp = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">let</span> powerLevel = <span class="hljs-number">9001</span>;<br><span class="hljs-keyword">let</span> multiplyMe = <span class="hljs-number">32</span>;<br><span class="hljs-keyword">let</span> quarterMe = <span class="hljs-number">1152</span>;<br><br>levelUp +=<span class="hljs-number">5</span>;<br>powerLevel -=<span class="hljs-number">100</span>;<br>multiplyMe *= <span class="hljs-number">11</span>;<br>quarterMe /=<span class="hljs-number">4</span>;<br><br><span class="hljs-comment">// These console.log() statements below will help you check the values of the variables.</span><br><span class="hljs-comment">// You do not need to edit these statements. </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The value of levelUp:&#x27;</span>, levelUp); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The value of powerLevel:&#x27;</span>, powerLevel); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The value of multiplyMe:&#x27;</span>, multiplyMe); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;The value of quarterMe:&#x27;</span>, quarterMe);<br></code></pre></td></tr></table></figure><h3 id="自加自减"><a href="#自加自减" class="headerlink" title="自加自减"></a>自加自减</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>a++;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// Output: 11</span><br><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">20</span>;<br>b--;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// Output: 19</span><br></code></pre></td></tr></table></figure><p>没什么好说的，这里和c like语言一样</p><h3 id="在输出中调用变量"><a href="#在输出中调用变量" class="headerlink" title="在输出中调用变量"></a>在输出中调用变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> favoriteAnimal=<span class="hljs-string">&#x27;bullshit&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;My favorite animal:&#x27;</span> + favoriteAnimal);<br></code></pre></td></tr></table></figure><h3 id="在输出中插值变量"><a href="#在输出中插值变量" class="headerlink" title="在输出中插值变量"></a>在输出中插值变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> myPet = <span class="hljs-string">&#x27;armadillo&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`I own a pet <span class="hljs-subst">$&#123;myPet&#125;</span>.`</span>);<span class="hljs-comment">//这里用的是反引号</span><br><span class="hljs-comment">// Output: I own a pet armadillo.</span><br></code></pre></td></tr></table></figure><p>这种写法和调用变量没什么不一样只是增加了可读性而已<br><br><strong>如果你想要用插值写法，必须使用反引号</strong></p><h1 id="Typeof"><a href="#Typeof" class="headerlink" title="Typeof"></a>Typeof</h1><p>当你想要知道某个变量的数据类型你可以使用typeof<br><br>下面是一个简单的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> unknown1 = <span class="hljs-string">&#x27;foo&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> unknown1); <span class="hljs-comment">// Output: string</span><br><br><span class="hljs-keyword">const</span> unknown2 = <span class="hljs-number">10</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> unknown2); <span class="hljs-comment">// Output: number</span><br><br><span class="hljs-keyword">const</span> unknown3 = <span class="hljs-literal">true</span>; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> unknown3); <span class="hljs-comment">// Output: boolean</span><br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>js与c like很不一样的一点是数字字母和布尔都能储存在var let const中，<br><br>js会自动识别他的数据类型</p><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><p>原文<br></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs text">Variables hold reusable data in a program and associate it with a name.<br><br>Variables are stored in memory.<br><br>The var keyword is used in pre-ES6 versions of JS.<br><br>let is the preferred way to declare a variable when it can be reassigned, and const is the preferred way to declare a variable with a constant value.<br><br>Variables that have not been initialized store the primitive data type undefined.<br><br>Mathematical assignment operators make it easy to calculate a new value and assign it to the same variable.<br><br>The + operator is used to concatenate strings including string values held in variables.<br><br>In ES6, template literals use backticks ` and $&#123;&#125; to interpolate values into a string.<br><br>The typeof keyword returns the data type (as a string) of a value.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记2</title>
    <link href="/2023/08/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <url>/2023/08/19/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</url>
    
    <content type="html"><![CDATA[<p>继上篇</p><h1 id="Built-in-Objects-内置对象"><a href="#Built-in-Objects-内置对象" class="headerlink" title="Built-in Objects  内置对象"></a>Built-in Objects  内置对象</h1><p>js里面还有很多的内置函数，这些函数都可以用<code>console</code>调用，以及后来的自己编写的函数。<br><br>一个对象<code>object</code>通常包含多个函数<br><br>例如对象<code>math</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>());<span class="hljs-comment">//输出一个随机的数到控制台</span><br></code></pre></td></tr></table></figure><p>若想要输出一个范围内的随机数，可以采用以下的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">50</span>;<span class="hljs-comment">//0-50</span><br></code></pre></td></tr></table></figure><p>上面这两个例子都是输出一个随机的浮点数，但你想要的是一个整数呢</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>();<span class="hljs-comment">//这个函数的作用是取整</span><br></code></pre></td></tr></table></figure><p>当你想要去一个0-50的随机的整数时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-number">50</span>)); <span class="hljs-comment">//虽然看起来有点怪</span><br></code></pre></td></tr></table></figure><h2 id="内置函数内置对象还有很多不一一例举了"><a href="#内置函数内置对象还有很多不一一例举了" class="headerlink" title="内置函数内置对象还有很多不一一例举了"></a>内置函数内置对象还有很多不一一例举了</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/">链接</a></p><h1 id="本章节复习"><a href="#本章节复习" class="headerlink" title="本章节复习"></a>本章节复习</h1><p>大意是复习前一章的内容，自己理解就行懒得翻译了</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs text">Data is printed, or logged, to the console, a panel that displays messages, with console.log().<br><br>We can write single-line comments with // and multi-line comments between /* and */.<br><br>There are 7 fundamental data types in <br>JavaScript: strings, numbers, booleans, null, undefined, symbol, and object.<br><br>Numbers are any number without quotes: 23.8879<br><br>Strings are characters wrapped in single or double quotes: &#x27;Sample String&#x27;<br><br>The built-in arithmetic operators include +, -, *, /, and %.<br><br>Objects, including instances of data types, can have properties, stored information. The properties are denoted with a . after the name of the object, for example: &#x27;Hello&#x27;.length.<br><br>Objects, including instances of data types, can have methods which perform actions. Methods are called by appending the object or instance with a period, the method name, and parentheses. For example: &#x27;hello&#x27;.toUpperCase().<br><br>We can access properties and methods by using the ., dot operator.<br><br>Built-in objects, including Math, are collections of methods and properties that JavaScript provides.<br></code></pre></td></tr></table></figure><h1 id="本章完结"><a href="#本章完结" class="headerlink" title="本章完结"></a>本章完结</h1>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记1</title>
    <link href="/2023/08/18/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <url>/2023/08/18/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</url>
    
    <content type="html"><![CDATA[<p>嗨嗨，从今天开始我将开始通过screeps：world和<a href="https://www.codecademy.com/">codecademy</a>里的教程开始学习js语言，这里是我的第一篇学习笔记<br></p><h1 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h1><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出<br></h3><p>js并不像其他的编程语言采用cout或者print之类的keyword代表输出字符到屏幕的函数<br><br>js采用的是console</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<span class="hljs-comment">//这一串代码代表的是输出一个数字5到屏幕上</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<span class="hljs-comment">//这一串代码的意思是输出一段字符串到屏幕上</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>);<span class="hljs-comment">//作用和上一条一模一样，但是一般情况下推荐使用单引号</span><br></code></pre></td></tr></table></figure><h1 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h1><p>js的注释采用c like的编程语言差不多的规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Prints 5 to the console</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>);  <span class="hljs-comment">// Prints 5 </span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">This is all commented </span><br><span class="hljs-comment">console.log(10);</span><br><span class="hljs-comment">None of this is going to run!</span><br><span class="hljs-comment">console.log(99);</span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-comment">/*IGNORED!*/</span> <span class="hljs-number">5</span>);  <span class="hljs-comment">// Still just prints 5 </span><br></code></pre></td></tr></table></figure><h1 id="Data-Types"><a href="#Data-Types" class="headerlink" title="Data Types"></a>Data Types</h1><p>js的数据类型总共有7种<br><br>分别是Number，String，Boolean，Null，Undefined，Symbol和Object<br><br>他们的意思分别是，数值，字符串，布尔，空字符，未定义，标志，和对象（即数据的组合<br><br>原文在这里，以防我的理解有偏差误导了读者</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs text">Number: Any number, including numbers with decimals: 4, 8, 1516, 23.42.<br><br>String: Any grouping of characters on your keyboard (letters, numbers, spaces, symbols, etc.) surrounded by single quotes: &#x27; ... &#x27; or double quotes &quot; ... &quot;, though we prefer single quotes. Some people like to think of string as a fancy word for text.<br><br>Boolean: This data type only has two possible values— either true or false (without quotes). It’s helpful to think of booleans as on and off switches or as the answers to a “yes” or “no” question.<br><br>Null: This data type represents the intentional absence of a value, and is represented by the keyword null (without quotes).<br><br>Undefined: This data type is denoted by the keyword undefined (without quotes). It also represents the absence of a value though it has a different use than null. undefined means that a given value does not exist.<br><br>Symbol: A newer feature to the language, symbols are unique identifiers, useful in more complex coding. No need to worry about these for now.<br><br>Object: Collections of related data.<br></code></pre></td></tr></table></figure><p>其中symbol是一个新的功能现在暂时还用不到。</p><h3 id="数值-字符串"><a href="#数值-字符串" class="headerlink" title="数值&amp;字符串"></a>数值&amp;字符串</h3><p>这两种数据类型是几乎所有编程语言里最常用的两种数据类型，上文已经演示过这么使用了，这里再演示一遍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;JavaScript&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">2008</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;bro i have no enemy&#x27;</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">9.25</span>)<br></code></pre></td></tr></table></figure><p>如上文所说，使用双引号或单引号的作用是一样的，当是仍然推荐单引号</p><h3 id="Arithmetic-Operators-运算"><a href="#Arithmetic-Operators-运算" class="headerlink" title="Arithmetic Operators 运算"></a>Arithmetic Operators 运算</h3><p>使用数值数据类型无法避免的会涉及到运算<br><br>下面展示如何进行四种基本运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span> + <span class="hljs-number">4</span>); <span class="hljs-comment">// Prints 7</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">3</span>+<span class="hljs-number">4</span>); <span class="hljs-comment">// Also Prints 7</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span> - <span class="hljs-number">1</span>); <span class="hljs-comment">// Prints 4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">4</span> * <span class="hljs-number">2</span>); <span class="hljs-comment">// Prints 8</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">9</span> / <span class="hljs-number">3</span>); <span class="hljs-comment">// Prints 3</span><br></code></pre></td></tr></table></figure><p>以及取余</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">11</span> % <span class="hljs-number">3</span>); <span class="hljs-comment">// Prints 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">12</span> % <span class="hljs-number">3</span>); <span class="hljs-comment">// Prints 0</span><br></code></pre></td></tr></table></figure><h3 id="String-Concatenation-字符串拼接"><a href="#String-Concatenation-字符串拼接" class="headerlink" title="String Concatenation 字符串拼接"></a>String Concatenation 字符串拼接</h3><p>不仅数字可以被操控加减，字符串也可以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;giga&#x27;</span> + <span class="hljs-string">&#x27;chad&#x27;</span>);<span class="hljs-comment">//输出gigachad</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;good&quot;</span>+<span class="hljs-string">&quot;man&quot;</span>);<span class="hljs-comment">//输出goodman</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;I &quot;</span> + <span class="hljs-string">&quot;can&#x27;t &quot;</span> + <span class="hljs-string">&quot;believe &quot;</span> + <span class="hljs-string">&quot;you &quot;</span> + <span class="hljs-string">&quot;done &quot;</span> + <span class="hljs-string">&quot;this&quot;</span>);<br><span class="hljs-comment">//输出 I can&#x27;t believe you done this 这个案例里有can&#x27;t要用到单引号，所以表示字符串要用双引号</span><br></code></pre></td></tr></table></figure><p>如果你想要拼接使字符串变成一个句子的话，你要注意单词与单词间的距离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;front &#x27;</span> + <span class="hljs-string">&#x27;space&#x27;</span>); <br><span class="hljs-comment">// Prints &#x27;front space&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;back&#x27;</span> + <span class="hljs-string">&#x27; space&#x27;</span>); <br><span class="hljs-comment">// Prints &#x27;back space&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;no&#x27;</span> + <span class="hljs-string">&#x27;space&#x27;</span>); <br><span class="hljs-comment">// Prints &#x27;nospace&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;middle&#x27;</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-string">&#x27;space&#x27;</span>); <br><span class="hljs-comment">// Prints &#x27;middle space&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;why&#x27;</span>+<span class="hljs-string">&#x27; &#x27;</span>+<span class="hljs-string">&#x27;are &#x27;</span> +<span class="hljs-string">&quot;you&quot;</span>+ <span class="hljs-string">&#x27; gay&#x27;</span>);<br><span class="hljs-comment">//just kidding</span><br><span class="hljs-comment">//这样的代码虽然是可行的，但是非常不易读，所以当你在开始写代码的时候最好统一规范你写代码的格式</span><br></code></pre></td></tr></table></figure><h1 id="Properties-一些函数与特性"><a href="#Properties-一些函数与特性" class="headerlink" title="Properties 一些函数与特性"></a>Properties 一些函数与特性</h1><h3 id="length函数"><a href="#length函数" class="headerlink" title="length函数"></a>length函数</h3><p>这个函数的用法和C&#x2F;C++里很像，<br>可以直接这样调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;s how long is this sentence&#x27;</span>.<span class="hljs-property">length</span>);<br></code></pre></td></tr></table></figure><p>用过的都知道</p><h3 id="全大写"><a href="#全大写" class="headerlink" title="全大写"></a>全大写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fuck you&#x27;</span>.<span class="hljs-title function_">toUpperCase</span>());<br></code></pre></td></tr></table></figure><p>输出的时候全大写</p><h3 id="判断开头字母"><a href="#判断开头字母" class="headerlink" title="判断开头字母"></a>判断开头字母</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Yes&#x27;</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;Y&#x27;</span>));<span class="hljs-comment">//输出true</span><br></code></pre></td></tr></table></figure><p>只有输入判断的时候有用</p><h3 id="删除字符串前后的多余空间"><a href="#删除字符串前后的多余空间" class="headerlink" title="删除字符串前后的多余空间"></a>删除字符串前后的多余空间</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;    Remove whitespace   &#x27;</span>.<span class="hljs-title function_">trim</span>());<br></code></pre></td></tr></table></figure><h2 id="更多用法看一下链接"><a href="#更多用法看一下链接" class="headerlink" title="更多用法看一下链接"></a>更多用法看一下链接</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#string_primitives_and_string_objects">链接</a></p><h1 id="Built-in-Objects"><a href="#Built-in-Objects" class="headerlink" title="Built-in Objects"></a>Built-in Objects</h1><p>不写了现在是半夜0.30了，明天再写吧</p>]]></content>
    
    
    
    <tags>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决ubuntu更新软件源时遇上的 Temporary failure resolving &#39;xxx&#39; 问题</title>
    <link href="/2023/08/17/%E8%A7%A3%E5%86%B3ubuntu%E6%97%A0%E6%B3%95%E8%A7%A3%E6%9E%90%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/17/%E8%A7%A3%E5%86%B3ubuntu%E6%97%A0%E6%B3%95%E8%A7%A3%E6%9E%90%E8%BD%AF%E4%BB%B6%E6%BA%90%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="我的操作环境"><a href="#我的操作环境" class="headerlink" title="我的操作环境"></a>我的操作环境</h1><p>win10 19045.3208 和wsl2的ubuntu 22.04.2</p><h2 id="具体问题"><a href="#具体问题" class="headerlink" title="具体问题"></a>具体问题</h2><p>在安装完wsl2并且开启后执行<code>apt update </code>出现报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>chai@DESKTOP-H06H5NE:~$sudo su                                                                                                                                                                                                              [sudo]password for chai:                                                                                                                                                                                                                    root@DESKTOP-H06H5NE:/home/chai# apt update                                                                                                                                                                                                  Ign:1 http://archive.ubuntu.com/ubuntu jammy InRelease                                                                                                                                                                                       Ign:2 http://security.ubuntu.com/ubuntu jammy-security InRelease                                                                                                                                                                             Ign:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease                                                                                                                                                                               Ign:2 http://security.ubuntu.com/ubuntu jammy-security InRelease                                                                                                                                                                             Ign:4 http://archive.ubuntu.com/ubuntu jammy-backports InRelease                                                                                                                                                                             Ign:2 http://security.ubuntu.com/ubuntu jammy-security InRelease                                                                                                                                                                             Ign:1 http://archive.ubuntu.com/ubuntu jammy InRelease                                                                                                                                                                                       Err:2 http://security.ubuntu.com/ubuntu jammy-security InRelease                                                                                                                                                                               Temporary failure resolving &#x27;security.ubuntu.com&#x27;                                                                                                                                                                                          Ign:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease                                                                                                                                                                               Ign:4 http://archive.ubuntu.com/ubuntu jammy-backports InRelease                                                                                                                                                                             Ign:1 http://archive.ubuntu.com/ubuntu jammy InRelease                                                                                                                                                                                       Ign:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease                                                                                                                                                                               Ign:4 http://archive.ubuntu.com/ubuntu jammy-backports InRelease                                                                                                                                                                             Err:1 http://archive.ubuntu.com/ubuntu jammy InRelease                                                                                                                                                                                         Temporary failure resolving &#x27;archive.ubuntu.com&#x27;                                                                                                                                                                                           Err:3 http://archive.ubuntu.com/ubuntu jammy-updates InRelease                                                                                                                                                                                 Temporary failure resolving &#x27;archive.ubuntu.com&#x27;                                                                                                                                                                                           Err:4 http://archive.ubuntu.com/ubuntu jammy-backports InRelease                                                                                                                                                                               Temporary failure resolving &#x27;archive.ubuntu.com&#x27;                                                                                                                                                                                           Reading package lists... Done                                                                                                                                                                                                                Building dependency tree... Done                                                                                                                                                                                                             Reading state information... Done                                                                                                                                                                                                            All packages are up to date.                                                                                                                                                                                                                 W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/jammy/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;                                                                                                                  W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/jammy-updates/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;                                                                                                          W: Failed to fetch http://archive.ubuntu.com/ubuntu/dists/jammy-backports/InRelease  Temporary failure resolving &#x27;archive.ubuntu.com&#x27;                                                                                                        W: Failed to fetch http://security.ubuntu.com/ubuntu/dists/jammy-security/InRelease  Temporary failure resolving &#x27;security.ubuntu.com&#x27;                                                                                                       W: Some index files failed to download. They have been ignored, or old ones used instead.<br><br></code></pre></td></tr></table></figure><p>当时我并没有在意，直到发现换了国内源以后还会发生报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@DESKTOP-H06H5NE:/home/chai# vi /etc/apt/sources.list                                                                                                                                                                                    root@DESKTOP-H06H5NE:/home/chai# apt update                                                                                                                                                                                                  Ign:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy InRelease                                                                                                                                                                            Ign:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-updates InRelease                                                                                                                                                                    Ign:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-backports InRelease                                                                                                                                                                  Ign:4 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-security InRelease                                                                                                                                                                   Ign:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy InRelease                                                                                                                                                                            Ign:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-updates InRelease                                                                                                                                                                    Ign:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-backports InRelease                                                                                                                                                                  Ign:4 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-security InRelease                                                                                                                                                                   Ign:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy InRelease                                                                                                                                                                            Ign:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-updates InRelease                                                                                                                                                                    Ign:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-backports InRelease                                                                                                                                                                  Ign:4 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-security InRelease                                                                                                                                                                   Err:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy InRelease                                                                                                                                                                              Temporary failure resolving &#x27;mirrors.tuna.tsinghua.edu.cn&#x27;                                                                                                                                                                                 Err:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-updates InRelease                                                                                                                                                                      Temporary failure resolving &#x27;mirrors.tuna.tsinghua.edu.cn&#x27;                                                                                                                                                                                 Err:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-backports InRelease                                                                                                                                                                    Temporary failure resolving &#x27;mirrors.tuna.tsinghua.edu.cn&#x27;                                                                                                                                                                                 Err:4 https://mirrors.tuna.tsinghua.edu.cn/ubuntu jammy-security InRelease                                                                                                                                                                     Temporary failure resolving &#x27;mirrors.tuna.tsinghua.edu.cn&#x27;                                                                                                                                                                                 Reading package lists... Done                                                                                                                                                                                                                Building dependency tree... Done                                                                                                                                                                                                             Reading state information... Done                                                                                                                                                                                                            All packages are up to date.                                                                                                                                                                                                                 W: Failed to fetch https://mirrors.tuna.tsinghua.edu.cn/ubuntu/dists/jammy/InRelease  Temporary failure resolving &#x27;mirrors.tuna.tsinghua.edu.cn&#x27;                                                                                             W: Failed to fetch https://mirrors.tuna.tsinghua.edu.cn/ubuntu/dists/jammy-updates/InRelease  Temporary failure resolving &#x27;mirrors.tuna.tsinghua.edu.cn&#x27;                                                                                     W: Failed to fetch https://mirrors.tuna.tsinghua.edu.cn/ubuntu/dists/jammy-backports/InRelease  Temporary failure resolving &#x27;mirrors.tuna.tsinghua.edu.cn&#x27;                                                                                   W: Failed to fetch https://mirrors.tuna.tsinghua.edu.cn/ubuntu/dists/jammy-security/InRelease  Temporary failure resolving &#x27;mirrors.tuna.tsinghua.edu.cn&#x27;                                                                                    W: Some index files failed to download. They have been ignored, or old ones used instead.<br></code></pre></td></tr></table></figure><p>我才意识到确实可能是出问题了，一开始我的设想是因为我在windows环境里安装了clash for windows的虚拟网卡导致了问题<br><br>查到一篇文章说可以在wsl2里设置代理就可以让wsl2走cfw的代理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">export http_proxy=&#x27;http://192.168.3.4:7890&#x27;  # 根据实际IP和端口修改地址<br>export https_proxy=&#x27;http://192.168.3.4:7890&#x27;<br>export all_proxy=&#x27;socks5://192.168.3.4:7890&#x27;<br>export ALL_PROXY=&#x27;socks5://192.168.3.4:7890&#x27;<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/451198301">参考</a><br><br>但是我实测还是不行，我认为可能因为wsl2实质上是个虚拟机，虚拟机是不能直接访问本机的地址的（或者别的原因？<br><br>但是我又在另一个bbs里找到了和我遇上相同问题的人<a href="https://www.v2ex.com/t/677083">链接</a><br><br>他们所说的那些我这个猪脑实在是搞不懂了，但是看他们的说法，好像买路由器才是最好的解决办法了。。。<br><br>（好吧好吧我攒钱买路由器去了:-|</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn-C-the-Hard-Way-ex5</title>
    <link href="/2023/08/15/Learn-C-the-Hard-Way-ex5/"/>
    <url>/2023/08/15/Learn-C-the-Hard-Way-ex5/</url>
    
    <content type="html"><![CDATA[<h1 id="练习5：一个C程序的结构"><a href="#练习5：一个C程序的结构" class="headerlink" title="练习5：一个C程序的结构"></a>练习5：一个C程序的结构</h1><blockquote><p>原文：<a href="http://c.learncodethehardway.org/book/ex5.html">Exercise 5: The Structure Of A C Program</a></p></blockquote><blockquote><p>译者：<a href="https://github.com/wizardforcel">飞龙</a></p></blockquote><p>你已经知道了如何使用<code>printf</code>，也有了可以随意使用的一些工具，现在让我们逐行分析一个简单的C程序，以便你了解它是如何组织的。在这个程序里你会编写一些不是很熟悉的东西，我会轻松地把它们拆开。之后在后面的几章我们将会处理这些概念。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">/* This is a comment. */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-type">int</span> distance = <span class="hljs-number">100</span>;<br><br>    <span class="hljs-comment">// this is also a comment</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;You are %d miles away.\n&quot;</span>, distance);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>手动输入这段代码并运行它，之后确保在<code>Valgrind</code>下不出现任何错误。你可能不会这样做，但你得习惯它。</p><h2 id="你会看到什么"><a href="#你会看到什么" class="headerlink" title="你会看到什么"></a>你会看到什么</h2><p>这真是一段无聊的输出，但是这个练习的目的是让你分析代码：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ make ex5<br>cc -Wall -g    ex5.c   -o ex5<br>$ ./ex5<br>You are 100 miles away.<br>$<br></code></pre></td></tr></table></figure><h2 id="分解代码"><a href="#分解代码" class="headerlink" title="分解代码"></a>分解代码</h2><p>当你输出这段代码时，可能你只弄清楚了这段代码中的一小部分C语言特性。让我们快速地逐行分解它，之后我们可以做一些练习来更好地了解每一部分：</p><p>　　ex5.c:1</p><p>　　这是一个<code>include</code>，它是将一个文件的内容导入到这个文件的方式。C具有使用<code>.h</code>扩展名作为头文件的惯例。头文件中拥有一些函数的列表，这些都是你想在程序中使用的函数。</p><p>　　ex5.c:3</p><p>　　这是多行注释，你可以在<code>/*</code>和<code>*/</code>之间放置任意多行。</p><p>　　ex5.c:4</p><p>　　这是一个你遇到的更复杂的 <code>main</code> 函数。操作系统加载完你的程序，之后会运行叫做<code>main</code>的函数，这是C程序的工作方式。这个函数只需要返回<code>int</code>，并接受两个参数，一个是<code>int</code>作为命令行参数的数量，另一个是<code>char*</code>字符串的数组作为命令行参数。这是不是让人难以理解？不用担心，我们稍后会讲解它。</p><p>　　ex5.c:5</p><p>　　任何函数都以<code>&#123;</code>字符开始，它表示“程序块”的开始。在Python中用一个<code>:</code>来表示。在其它语言中，可能需要用<code>begin</code>或者<code>do</code>来表示。</p><p>　　ex5.c:6</p><p>　　一个变量的声明和同时的赋值。你可以使用语法<code>type name = value;</code>来创建变量。在C的语句中，除了逻辑语句，都以一个<code>;</code>（分号）来结尾。</p><p>　　ex5.c:8</p><p>　　注释的另一种形式，它就像Python或Ruby的注释。它以<code>//</code>开头，直到行末结束。</p><p>　　ex5.c:9</p><p>　　调用了我们的老朋友<code>printf</code>。就像许多语言中的函数调用，使用语法<code>name(arg1, arg2);</code>。函数可以不带任何参数，也可以拥有任何数量的参数。<code>printf</code>函数是一类特别的函数，可以带可变数量的参数。我们会在之后说明。</p><p>　　ex5.c:11</p><p>　　一个<code>main</code>函数的返回语句，它会向OS提供退出值。你可能不熟悉Unix软件的返回代码，所以这个也放到后面去讲。</p><p>　　ex5.c:12</p><p>　　最后，我们以一个闭合的<code>&#125;</code>花括号来结束了<code>main</code>函数。它就是整个程序的结尾了。</p><p>在这次分解中有大量的信息，所以你应该逐行来学习，并且确保至少掌握了背后发生了什么。你不一定了解所有东西，但是在我们继续之前，你可以猜猜它们的意思。</p><h2 id="附加题"><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h2><ul><li>对于每一行，写出你不理解的符号，并且看看是否能猜出它们的意思。在纸上写下你的猜测，你可以在以后检查它，看看是否正确。</li><li>回头去看之前几个练习的源代码，并且像这样分解代码，来看看你是否了解它们。写下你不了解和不能自己解释的东西。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Learn-C-the-Hard-Way</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn-C-the-Hard-Way-ex4</title>
    <link href="/2023/08/15/Learn-C-the-Hard-Way-ex4/"/>
    <url>/2023/08/15/Learn-C-the-Hard-Way-ex4/</url>
    
    <content type="html"><![CDATA[<h1 id="练习4：Valgrind-介绍"><a href="#练习4：Valgrind-介绍" class="headerlink" title="练习4：Valgrind 介绍"></a>练习4：Valgrind 介绍</h1><blockquote><p>原文：<a href="http://c.learncodethehardway.org/book/ex4.html">Exercise 4: Introducing Valgrind</a></p></blockquote><blockquote><p>译者：<a href="https://github.com/wizardforcel">飞龙</a></p></blockquote><p>现在是介绍另一个工具的时间了，在你学习C的过程中，你会时时刻刻用到它，它就是 <code>Valgrind</code>。我现在就向你介绍 <code>Valgrind</code>，是因为从现在开始你将会在“如何使它崩溃”一节中用到它。<code>Valgrind</code>是一个运行你的程序的程序，并且随后会报告所有你犯下的可怕错误。它是一款相当棒的自由软件，我在编写C代码时一直使用它。</p><p>回忆一下在上一章中，我让你移除<code>printf</code>的一个参数，来使你的代码崩溃。它打印出了一些奇怪的结果，但我并没有告诉你为什么它会这样打印。这个练习中我们要使用<code>Valgrind</code>来搞清楚为什么。</p><blockquote><p>注</p></blockquote><blockquote><p>这本书的前几章讲解了一小段代码，同时掺杂了一些必要的工具，它们在本书的剩余章节会用到。这样做的原因是，阅读这本书的大多数人都不熟悉编译语言，也必然不熟悉自动化的辅助工具。通过先让你懂得如何使用<code>make</code>和<code>Valgrind</code>，我可以在后面使用它们更快地教你C语言，以及帮助你尽早找出所有的bug。</p></blockquote><blockquote><p>这一章之后我就不再介绍更多的工具了，每章的内容大部分是代码，以及少量的语法。然而，我也会提及少量工具，我们可以用它来真正了解发生了什么，以及更好地了解常见的错误和问题。</p></blockquote><h2 id="安装-Valgrind"><a href="#安装-Valgrind" class="headerlink" title="安装 Valgrind"></a>安装 Valgrind</h2><p>你可以用OS上的包管理器来安装<code>Valgrind</code>，但是我想让你学习如何从源码安装程序。这涉及到下面几个步骤：</p><ul><li>下载源码的归档文件来获得源码</li><li>解压归档文件，将文件提取到你的电脑上</li><li>运行<code>./configure</code>来建立构建所需的配置</li><li>运行<code>make</code>来构建源码，就像之前所做的那样</li><li>运行<code>sudo make install</code>来将它安装到你的电脑</li></ul><p>下面是执行以上步骤的脚本，我想让你复制它：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 1) Download it (use wget if you don&#x27;t have curl)</span><br>curl -O http://valgrind.org/downloads/valgrind-3.6.1.tar.bz2<br><br><span class="hljs-comment"># use md5sum to make sure it matches the one on the site</span><br><span class="hljs-built_in">md5sum</span> valgrind-3.6.1.tar.bz2<br><br><span class="hljs-comment"># 2) Unpack it.</span><br>tar -xjvf valgrind-3.6.1.tar.bz2<br><br><span class="hljs-comment"># cd into the newly created directory</span><br><span class="hljs-built_in">cd</span> valgrind-3.6.1<br><br><span class="hljs-comment"># 3) configure it</span><br>./configure<br><br><span class="hljs-comment"># 4) make it</span><br>make<br><br><span class="hljs-comment"># 5) install it (need root)</span><br>sudo make install<br></code></pre></td></tr></table></figure><p>按照这份脚本，但是如果 <code>Valgrind</code> 有新的版本请更新它。如果它不能正常执行，也请试着深入研究原因。</p><h2 id="使用-Valgrind"><a href="#使用-Valgrind" class="headerlink" title="使用 Valgrind"></a>使用 Valgrind</h2><p>使用 <code>Valgrind</code> 十分简单，只要执行<code>valgrind theprogram</code>，它就会运行你的程序，随后打印出你的程序运行时出现的所有错误。在这个练习中，我们会崩溃在一个错误输出上，然后会修复它。</p><p>首先，这里有一个<code>ex3.c</code>的故意出错的版本，叫做<code>ex4.c</code>。出于练习目的，将它再次输入到文件中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">/* Warning: This program is wrong on purpose. */</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> age = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> height;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am %d years old.\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am %d inches tall.\n&quot;</span>, height);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>你会发现，除了两个经典的错误外，其余部分都相同：</p><ul><li>没有初始化<code>height</code>变量</li><li>没有将<code>age</code>变量传入第一个<code>printf</code>函数</li></ul><h2 id="你会看到什么"><a href="#你会看到什么" class="headerlink" title="你会看到什么"></a>你会看到什么</h2><p>现在我们像通常一样构建它，但是不要直接运行，而是使用<code>Valgrind</code>来运行它（见源码：”使用Valgrind构建并运行 ex4.c”）：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ make ex4<br>cc -Wall -g    ex4.c   -o ex4<br>ex4.c: In <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;main&#x27;</span>:<br>ex4.c:10: warning: too few arguments <span class="hljs-keyword">for</span> format<br>ex4.c:7: warning: unused variable <span class="hljs-string">&#x27;age&#x27;</span><br>ex4.c:11: warning: <span class="hljs-string">&#x27;height&#x27;</span> is used uninitialized <span class="hljs-keyword">in</span> this <span class="hljs-keyword">function</span><br>$ valgrind ./ex4<br>==3082== Memcheck, a memory error detector<br>==3082== Copyright (C) 2002-2010, and GNU GPL<span class="hljs-string">&#x27;d, by Julian Seward et al.</span><br><span class="hljs-string">==3082== Using Valgrind-3.6.0.SVN-Debian and LibVEX; rerun with -h for copyright info</span><br><span class="hljs-string">==3082== Command: ./ex4</span><br><span class="hljs-string">==3082==</span><br><span class="hljs-string">I am -16775432 years old.</span><br><span class="hljs-string">==3082== Use of uninitialised value of size 8</span><br><span class="hljs-string">==3082==    at 0x4E730EB: _itoa_word (_itoa.c:195)</span><br><span class="hljs-string">==3082==    by 0x4E743D8: vfprintf (vfprintf.c:1613)</span><br><span class="hljs-string">==3082==    by 0x4E7E6F9: printf (printf.c:35)</span><br><span class="hljs-string">==3082==    by 0x40052B: main (ex4.c:11)</span><br><span class="hljs-string">==3082==</span><br><span class="hljs-string">==3082== Conditional jump or move depends on uninitialised value(s)</span><br><span class="hljs-string">==3082==    at 0x4E730F5: _itoa_word (_itoa.c:195)</span><br><span class="hljs-string">==3082==    by 0x4E743D8: vfprintf (vfprintf.c:1613)</span><br><span class="hljs-string">==3082==    by 0x4E7E6F9: printf (printf.c:35)</span><br><span class="hljs-string">==3082==    by 0x40052B: main (ex4.c:11)</span><br><span class="hljs-string">==3082==</span><br><span class="hljs-string">==3082== Conditional jump or move depends on uninitialised value(s)</span><br><span class="hljs-string">==3082==    at 0x4E7633B: vfprintf (vfprintf.c:1613)</span><br><span class="hljs-string">==3082==    by 0x4E7E6F9: printf (printf.c:35)</span><br><span class="hljs-string">==3082==    by 0x40052B: main (ex4.c:11)</span><br><span class="hljs-string">==3082==</span><br><span class="hljs-string">==3082== Conditional jump or move depends on uninitialised value(s)</span><br><span class="hljs-string">==3082==    at 0x4E744C6: vfprintf (vfprintf.c:1613)</span><br><span class="hljs-string">==3082==    by 0x4E7E6F9: printf (printf.c:35)</span><br><span class="hljs-string">==3082==    by 0x40052B: main (ex4.c:11)</span><br><span class="hljs-string">==3082==</span><br><span class="hljs-string">I am 0 inches tall.</span><br><span class="hljs-string">==3082==</span><br><span class="hljs-string">==3082== HEAP SUMMARY:</span><br><span class="hljs-string">==3082==     in use at exit: 0 bytes in 0 blocks</span><br><span class="hljs-string">==3082==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated</span><br><span class="hljs-string">==3082==</span><br><span class="hljs-string">==3082== All heap blocks were freed -- no leaks are possible</span><br><span class="hljs-string">==3082==</span><br><span class="hljs-string">==3082== For counts of detected and suppressed errors, rerun with: -v</span><br><span class="hljs-string">==3082== Use --track-origins=yes to see where uninitialised values come from</span><br><span class="hljs-string">==3082== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 4 from 4)</span><br><span class="hljs-string">$</span><br></code></pre></td></tr></table></figure><blockquote><p>注</p></blockquote><blockquote><p>如果你运行了<code>Valgrind</code>，它显示一些类似于<code>by 0x4052112: (below main) (libc-start.c:226)</code>的东西，而不是<code>main.c</code>中的行号，你需要使用<code>valgrind --track-origins=yes ./ex4</code>命令来运行你的<code>Valgrind</code>。由于某些原因，<code>valgrind</code>的Debian和Ubuntu上的版本会这样，但是其它的不会。</p></blockquote><p>上面那段输出非常长，因为<code>Valgrind</code>在明确地告诉你程序中的每个错误都在哪儿。让我们从开头逐行分析一下（行号在左边，你可以参照）：</p><p>1</p><p>你执行了通常的<code>make ex4</code>来构建它。确保你看到的<code>cc</code>命令和它一样，并且带有<code>-g</code>选项，否则<code>Valgrind</code>的输出不会带上行号。</p><p>2~6</p><p>要注意编译器也会向你报告源码的错误，它警告你“向格式化函数传入了过少的变量”，因为你忘记包含<code>age</code>变量。</p><p>7</p><p>然后使用<code>valgrind ./ex4</code>来运行程序。</p><p>8</p><p>之后<code>Valgrind</code>变得十分奇怪，并向你报错：</p><p>　　14~18</p><p>　　在<code>main (ex4.c:11)</code>（意思是文件<code>ex4.c</code>的<code>main</code>函数的第11行）的那行中，有“大小为8的未初始化的值”。你通过查看错误找到了它，并且在它下面看到了“栈踪迹”。最开始看到的那行<code>(ex4.c:11)</code>在最下面，如果你不明白哪里出错了，你可以向上看，比如<code>printf.c:35</code>。通常最下面的一行最重要（这个例子中是第18行）。</p><p>　　20~24</p><p>　　下一个错误位于 <code>main</code> 函数中的 <code>ex4.c:11</code>。<code>Valgrind</code>不喜欢这一行，它说的是一些 if 语句或者 while 循环基于一个未初始化的值，在这个例子中是<code>height</code>。</p><p>　　25~35</p><p>　　剩下的错误都大同小异，因为这个值还在继续使用。</p><p>37~46</p><p>最后程序退出了，<code>Valgrind</code>显示出一份摘要，告诉你程序有多烂。</p><p>这段信息读起来会相当多，下面是你的处理方法：</p><ul><li>无论什么时候你运行C程序并且使它工作，都应该使用<code>Valgrind</code>重新运行它来检查。</li><li>对于得到的每个错误，找到“源码:行数”提示的位置，然后修复它。你可以上网搜索错误信息，来弄清楚它的意思。</li><li>一旦你的程序在<code>Valgrind</code>下不出现任何错误信息，应该就好了。你可能学会了如何编写代码的一些技巧。</li></ul><p>在这个练习中我并不期待你马上完全掌握<code>Valgrind</code>，但是你应该安装并且学会如何快速使用它，以便我们将它用于后面的练习。</p><h2 id="附加题"><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h2><ul><li>按照上面的指导，使用<code>Valgrind</code>和编译器修复这个程序。</li><li>在互联网上查询<code>Valgrind</code>相关的资料。</li><li>下载另一个程序并手动构建它。尝试一些你已经使用，但从来没有手动构建的程序。</li><li>看看<code>Valgrind</code>的源码是如何在目录下组织的，并且阅读它的Makefile文件。不要担心，这对我来说没有任何意义。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Learn-C-the-Hard-Way</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn-C-the-Hard-Way-ex3</title>
    <link href="/2023/08/15/Learn-C-the-Hard-Way-ex3/"/>
    <url>/2023/08/15/Learn-C-the-Hard-Way-ex3/</url>
    
    <content type="html"><![CDATA[<h1 id="练习3：格式化输出"><a href="#练习3：格式化输出" class="headerlink" title="练习3：格式化输出"></a>练习3：格式化输出</h1><blockquote><p>原文：<a href="http://c.learncodethehardway.org/book/ex3.html">Exercise 3: Formatted Printing</a></p></blockquote><blockquote><p>译者：<a href="https://github.com/wizardforcel">飞龙</a></p></blockquote><p>不要删除Makefile，因为它可以帮你指出错误，以及当我们需要自动化处理一些事情时，可以向它添加新的东西。</p><p>许多编程语言都使用了C风格的格式化输出，所以让我们尝试一下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> age = <span class="hljs-number">10</span>;<br>    <span class="hljs-type">int</span> height = <span class="hljs-number">72</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am %d years old.\n&quot;</span>, age);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;I am %d inches tall.\n&quot;</span>, height);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>写完之后，执行通常的<code>make ex3</code>命令来构建并运行它。一定要确保你处理了所有的警告。</p><p>这个练习的代码量很小，但是信息量很大，所以让我们逐行分析一下：</p><ul><li>首先你包含了另一个头文件叫做<code>stdio.h</code>。这告诉了编译器你要使用“标准的输入&#x2F;输出函数”。它们之一就是<code>printf</code>。</li><li>然后你使用了一个叫<code>age</code>的变量并且将它设置为10。</li><li>接着你使用了一个叫<code>height</code>的变量并且设置为72。</li><li>再然后你使用<code>printf</code>函数来打印这个星球上最高的十岁的人的年龄和高度。</li><li>在<code>printf</code>中你会注意到你传入了一个字符串，这就是格式字符串，和其它语言中一样。</li><li>在格式字符串之后，你传入了一些变量，它们应该被<code>printf</code>“替换”进格式字符串中。</li></ul><p>这些语句的结果就是你用<code>printf</code>处理了一些变量，并且它会构造出一个新的字符串，之后将它打印在终端上。</p><h2 id="你会看到什么"><a href="#你会看到什么" class="headerlink" title="你会看到什么"></a>你会看到什么</h2><p>当你做完上面的整个步骤，你应该看到这些东西：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ make ex3<br>cc -Wall -g    ex3.c   -o ex3<br>$ ./ex3<br>I am 10 years old.<br>I am 72 inches tall.<br>$<br></code></pre></td></tr></table></figure><p>不久之后我会停下来让你运行<code>make</code>，并且告诉你构建过程是什么样子的。所以请确保你正确得到了这些信息并且能正常执行。</p><h2 id="外部研究"><a href="#外部研究" class="headerlink" title="外部研究"></a>外部研究</h2><p>在附加题一节我可能会让你自己查找一些资料，并且弄明白它们。这对于一个自我学习的程序员来说相当重要。如果你一直在自己尝试了解问题之前去问其它人，你永远都不会学到独立解决问题。这会让你永远都不会在自己的技能上建立信心，并且总是依赖别人去完成你的工作。</p><p>打破你这一习惯的方法就是强迫你自己先试着自己回答问题，并且确认你的回答是正确的。你可以通过打破一些事情，用实验验证可能的答案，以及自己进行研究来完成它。</p><p>对于这个练习，我想让你上网搜索<code>printf</code>的所有格式化占位符和转义序列。转义序列类似<code>\n</code>或者<code>\r</code>，可以让你分别打印新的一行或者 tab 。格式化占位符类似<code>%s</code>或者<code>%d</code>，可以让你打印字符串或整数。找到所有的这些东西，以及如何修改它们，和可设置的“精度”和宽度的种类。</p><p>从现在开始，这些任务会放到附加题里面，你应该去完成它们。</p><h2 id="如何使它崩溃"><a href="#如何使它崩溃" class="headerlink" title="如何使它崩溃"></a>如何使它崩溃</h2><p>尝试下面的一些东西来使你的程序崩溃，在你的电脑上它们可能会崩溃，也可能不会。</p><ul><li>从第一个<code>printf</code>中去掉<code>age</code>并重新编译，你应该会得到一大串的警告。</li><li>运行新的程序，它会崩溃，或者打印出奇怪的年龄。</li><li>将<code>printf</code>恢复原样，并且去掉<code>age</code>的初值，将那一行改为<code>int age;</code>，之后重新构建并运行。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># edit ex3.c to break printf</span><br>$ make ex3<br>cc -Wall -g    ex3.c   -o ex3<br>ex3.c: In <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;main&#x27;</span>:<br>ex3.c:8: warning: too few arguments <span class="hljs-keyword">for</span> format<br>ex3.c:5: warning: unused variable <span class="hljs-string">&#x27;age&#x27;</span><br>$ ./ex3<br>I am -919092456 years old.<br>I am 72 inches tall.<br><span class="hljs-comment"># edit ex3.c again to fix printf, but don&#x27;t init age</span><br>$ make ex3<br>cc -Wall -g    ex3.c   -o ex3<br>ex3.c: In <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;main&#x27;</span>:<br>ex3.c:8: warning: <span class="hljs-string">&#x27;age&#x27;</span> is used uninitialized <span class="hljs-keyword">in</span> this <span class="hljs-keyword">function</span><br>$ ./ex3<br>I am 0 years old.<br>I am 72 inches tall.<br>$<br></code></pre></td></tr></table></figure><h2 id="附加题"><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h2><ul><li>找到尽可能多的方法使<code>ex3</code>崩溃。</li><li>执行<code>man 3 printf</code>来阅读其它可用的’%’格式化占位符。如果你在其它语言中使用过它们，应该看着非常熟悉（它们来源于<code>printf</code>）。</li><li>将<code>ex3</code>添加到你的<code>Makefile</code>的<code>all</code>列表中。到目前为止，可以使用<code>make clean all</code>来构建你所有的练习。</li><li>将<code>ex3</code>添加到你的<code>Makefile</code>的<code>clean</code>列表中。当你需要的时候使用<code>make clean</code>可以删除它。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Learn-C-the-Hard-Way</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn-C-the-Hard-Way-ex2</title>
    <link href="/2023/08/15/Learn-C-the-Hard-Way-ex2/"/>
    <url>/2023/08/15/Learn-C-the-Hard-Way-ex2/</url>
    
    <content type="html"><![CDATA[<h1 id="练习2：用Make来代替Python"><a href="#练习2：用Make来代替Python" class="headerlink" title="练习2：用Make来代替Python"></a>练习2：用Make来代替Python</h1><blockquote><p>原文：<a href="http://c.learncodethehardway.org/book/ex2.html">Exercise 2: Make Is Your Python Now</a></p></blockquote><blockquote><p>译者：<a href="https://github.com/wizardforcel">飞龙</a></p></blockquote><p>在Python中，你仅仅需要输入<code>python</code>，就可以运行你想要运行的代码。Python的解释器会运行它们，并且在运行中导入它所需的库和其它东西。C是完全不同的东西，你需要事先编译你的源文件，并且手动将它们整合为一个可以自己运行的二进制文件。手动来做这些事情很痛苦，在上一个练习中只需要运行<code>make</code>就能完成。</p><p>这个练习是GNU make 的速成课，由于你在学C语言，所以你就必须掌握它。Make 将贯穿剩下的课程，等效于Python（命令）。它会构建源码，执行测试，设置一些选项以及为你做所有Python通常会做的事情。</p><p>有所不同的是，我会向你展示一些更智能化的Makefile魔法，你不需要指出你的C程序的每一个愚蠢的细节来构建它。我不会在练习中那样做，但是你需要先用一段时间的“低级 make”，我才能向你演示“大师级的make”。</p><h2 id="使用-Make"><a href="#使用-Make" class="headerlink" title="使用 Make"></a>使用 Make</h2><p>使用make的第一阶段就是用它已知的方式来构建程序。Make预置了一些知识，来从其它文件构建多种文件。上一个练习中，你已经使用像下面的命令来这样做了：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ make ex1<br><span class="hljs-comment"># or this one too</span><br>$ CFLAGS=<span class="hljs-string">&quot;-Wall&quot;</span> make ex1<br></code></pre></td></tr></table></figure><p>第一个命令中你告诉make，“我想创建名为ex1的文件”。于是Make执行下面的动作：</p><ul><li>文件<code>ex1</code>存在吗？</li><li>没有。好的，有没有其他文件以<code>ex1</code>开头？</li><li>有，叫做<code>ex1.c</code>。我知道如何构建<code>.c</code>文件吗？</li><li>是的，我会运行命令<code>cc ex1.c -o ex1</code>来构建它。</li><li>我将使用<code>cc</code>从<code>ex1.c</code>文件来为你构建<code>ex1</code>。</li></ul><p>上面列出的第二条命令是一种向make命令传递“修改器”的途径。如果你不熟悉Unix shell如何工作，你可以创建这些“环境变量”，它们会在程序运行时生效。有时你会用一条类似于<code>export CFLAGS=&quot;-Wall&quot;</code>的命令来执行相同的事情，取决于你所用的shell。然而你可以仅仅把它们放到你想执行的命令前面，于是环境变量只会在程序运行时有效。</p><p>在这个例子中我执行了<code>CFLAGS=&quot;-Wall&quot; make ex1</code>，所以它会给make通常使用的<code>cc</code>命令添加<code>-Wall</code>选项。这行命令告诉<code>cc</code>编译器要报告所有的警告（然而实际上不可能报告所有警告）。</p><p>实际上你可以深入探索使用make的上述方法，但是先让我们来看看<code>Makefile</code>，以便让你对make了解得更多一点。首先，创建文件并写入以下内容：</p><figure class="highlight make"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs make">CFLAGS=-Wall -g<br><br><span class="hljs-section">clean:</span><br>    rm -f ex1<br></code></pre></td></tr></table></figure><p>将文件在你的当前文件夹上保存为<code>Makefile</code>。Make会自动假设当前文件夹中有一个叫做<code>Makefile</code>的文件，并且会执行它。此外，一定要注意：确保你只输入了 TAB 字符，而不是空格和 TAB 的混合。</p><blockquote><p>译者注：上述代码中第四行<code>rm</code>前面是一个 TAB ，而不是多个等量的空格。</p></blockquote><p><code>Makefile</code>向你展示了make的一些新功能。首先我们在文件中设置<code>CFLAGS</code>，所以之后就不用再设置了。并且，我们添加了<code>-g</code>标识来获取调试信息。接着我们写了一个叫做<code>clean</code>的部分，它告诉make如何清理我们的小项目。</p><p>确保它和你的<code>ex1.c</code>文件在相同的目录中，之后运行以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ make clean<br>$ make ex1<br></code></pre></td></tr></table></figure><h2 id="你会看到什么"><a href="#你会看到什么" class="headerlink" title="你会看到什么"></a>你会看到什么</h2><p>如果代码能正常工作，你应该看到这些：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ make clean<br><span class="hljs-built_in">rm</span> -f ex1<br>$ make ex1<br>cc -Wall -g    ex1.c   -o ex1<br>ex1.c: In <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;main&#x27;</span>:<br>ex1.c:3: warning: implicit declaration of <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;puts&#x27;</span><br>$<br></code></pre></td></tr></table></figure><p>你可以看出来我执行了<code>make clean</code>，它告诉make执行我们的<code>clean</code>目标。再去看一眼Makefile，之后你会看到在它的下面，我缩进并且输入了一些想要make为我运行的shell命令。你可以在此处输入任意多的命令，所以它是一个非常棒的自动化工具。</p><blockquote><p>注</p></blockquote><blockquote><p>如果你修改了<code>ex1.c</code>，添加了<code>#include&lt;stdio&gt;</code>，输出中的关于<code>puts</code>的警告就会消失（这其实应该算作一个错误）。我这里有警告是因为我并没有去掉它。</p></blockquote><p>同时也要注意，即使我们在<code>Makefile</code>中并没有提到<code>ex1</code>，<code>make</code>仍然会知道如何构建它，以及使用我们指定的设置。</p><h2 id="如何使它崩溃"><a href="#如何使它崩溃" class="headerlink" title="如何使它崩溃"></a>如何使它崩溃</h2><p>上面那些已经足够让你起步了，但是让我们以一种特定的方式来破坏make文件，以便你可以看到发生了什么。找到<code>rm -f ex1</code>的那一行并去掉缩进（让它左移），之后你可以看到发生了什么。再次运行<code>make clean</code>，你就会得到下面的信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ make clean<br>Makefile:4: *** missing separator.  Stop.<br></code></pre></td></tr></table></figure><p>永远记住要缩进，以及如果你得到了像这种奇奇怪怪的错误，应该复查你是否都使用了 TAB 字符，由于一些make的变种十分挑剔。</p><h2 id="附加题"><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h2><ul><li>创建目标<code>all:ex1</code>，可以以单个命令<code>make</code>构建<code>ex1</code>。</li><li>阅读<code>man make</code>来了解关于如何执行它的更多信息。</li><li>阅读<code>man cc</code>来了解关于<code>-Wall</code>和<code>-g</code>行为的更多信息。</li><li>在互联网上搜索Makefile文件，看看你是否能改进你的文件。</li><li>在另一个C语言项目中找到<code>Makefile</code>文件，并且尝试理解它做了什么。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Learn-C-the-Hard-Way</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn-C-the-Hard-Way-ex1</title>
    <link href="/2023/08/15/Learn-C-the-Hard-Way-ex1/"/>
    <url>/2023/08/15/Learn-C-the-Hard-Way-ex1/</url>
    
    <content type="html"><![CDATA[<h1 id="练习1：启用编译器"><a href="#练习1：启用编译器" class="headerlink" title="练习1：启用编译器"></a>练习1：启用编译器</h1><blockquote><p>原文：<a href="http://c.learncodethehardway.org/book/ex1.html">Exercise 1: Dust Off That Compiler</a></p></blockquote><blockquote><p>译者：<a href="https://github.com/wizardforcel">飞龙</a></p></blockquote><p>这是你用C写的第一个简单的程序：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span><br>&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Hello world.&quot;</span>);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>把它写进 <code>ex1.c</code> 并输入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ make ex1<br>cc     ex1.c   -o ex1<br></code></pre></td></tr></table></figure><p>你的编译器可能会使用一个有些不同的命令，但是最后应该会产生一个名为<code>ex1</code>的文件，并且你可以运行它。</p><h2 id="你会看到什么"><a href="#你会看到什么" class="headerlink" title="你会看到什么"></a>你会看到什么</h2><p>现在你可以运行程序并看到输出。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">$ ./ex1<br>Hello world.<br></code></pre></td></tr></table></figure><p>如果没有，则需要返回去修复它。</p><h2 id="如何使它崩溃"><a href="#如何使它崩溃" class="headerlink" title="如何使它崩溃"></a>如何使它崩溃</h2><p>在这本书中我会添加一个小节，关于如何使程序崩溃。我会让你对程序做一些奇怪的事情，以奇怪的方式运行，或者修改代码，以便让你看到崩溃和编译器错误。</p><p>对于这个程序，打开所有编译警告重新构建它：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ <span class="hljs-built_in">rm</span> ex1<br>$ CFLAGS=<span class="hljs-string">&quot;-Wall&quot;</span> make ex1<br>cc -Wall    ex1.c   -o ex1<br>ex1.c: In <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;main&#x27;</span>:<br>ex1.c:3: warning: implicit declaration of <span class="hljs-keyword">function</span> <span class="hljs-string">&#x27;puts&#x27;</span><br>$ ./ex1<br>Hello world.<br>$<br></code></pre></td></tr></table></figure><p>现在你会得到一个警告，说<code>puts</code>函数是隐式声明的。C语言的编译器很智能，它能够理解你想要什么。但是如果可以的话，你应该去除所有编译器警告。把下面一行添加到<code>ex1.c</code>文件的最上面，之后重新编译来去除它：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br></code></pre></td></tr></table></figure><p>现在像刚才一样重新执行make命令，你会看到所有警告都消失了。</p><h2 id="附加题"><a href="#附加题" class="headerlink" title="附加题"></a>附加题</h2><ul><li>在你的文本编辑器中打开<code>ex1</code>文件，随机修改或删除一部分，之后运行它看看发生了什么。</li><li>再多打印5行文本或者其它比<code>&quot;Hello world.&quot;</code>更复杂的东西。</li><li>执行<code>man 3 puts</code>来阅读这个函数和其它函数的文档。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Learn-C-the-Hard-Way</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn-C-the-Hard-Way-ex0</title>
    <link href="/2023/08/15/Learn-C-the-Hard-Way-ex0/"/>
    <url>/2023/08/15/Learn-C-the-Hard-Way-ex0/</url>
    
    <content type="html"><![CDATA[<h1 id="练习0：准备"><a href="#练习0：准备" class="headerlink" title="练习0：准备"></a>练习0：准备</h1><blockquote><p>原文：<a href="http://c.learncodethehardway.org/book/ex0.html">Exercise 0: The Setup</a></p></blockquote><blockquote><p>译者：<a href="https://github.com/wizardforcel">飞龙</a></p></blockquote><p>在这一章中，你将为C语言编程配置好你的系统。一个好消息是对于所有使用Linux或者Mac的人，你的系统是为C语言编程而设计的。C语言的创造者也对Unix操作系统的创造做出了贡献，并且Linux和OSX都是基于Unix的。事实上，安装工作会非常简单。</p><p>对于Windows上的用户，我有一个坏消息：在Windows上学习C非常痛苦。你可以在Windows上编写C代码，这并不是问题。问题是所有的库、函数和工具都和其它的C语言环境有些差异。C来自于Unix，并且和Unix平台配合得比较好。恐怕这是一个你并不能接受的事实。</p><p>然而你并不需要为此恐慌。我并不是说要完全避免Windows。然而我说的是，如果你打算以最短的时间来学习C，你需要接触Unix并适应它。这同时也对你有帮助，因为懂得一些Unix的知识，也会让你懂得一些C编程的习惯，以及扩充你的技能。</p><p>这也意味着每个人都需要使用命令行。嗯，就是这样。你将会进入命令行并且键入一些命令。不要为此感到害怕，因为我会告诉你要键入什么，以及结果应该是什么样子，所以你实际上会学到很多东西，同时扩充自己的技能。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>在多数Linux系统上你都需要安装一些包。对于基于Debian的系统，例如Ubuntu你需要使用下列命令来安装一些东西：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo apt-get install build-essential<br></code></pre></td></tr></table></figure><p>上面是命令行提示符的一个示例。你需要接触到能输入它的地方，找到你的“终端”程序并且运行它。接着，你会看到一个类似于<code>$</code>的Shell提示符，并且你可以在里面键入命令。不要键入<code>$</code>，而是它后面的东西。</p><p>下面是在基于RPM的Linux系统，例如Fedora中执行相同安装工作的方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ su -c <span class="hljs-string">&quot;yum groupinstall development-tools&quot;</span><br></code></pre></td></tr></table></figure><p>一旦你运行了它，它会正常工作，你应该能够做本书的第一个练习。如果不能请告诉我。</p><h2 id="Mac-OSX"><a href="#Mac-OSX" class="headerlink" title="Mac OSX"></a>Mac OSX</h2><p>在 Mac OSX上，安装工作会更简单。首先，你需要从苹果官网下载最新的<code>XCode</code>，或者找到你的安装DVD并从中安装。需要下载的文件很大，要花费很长时间，所以我推荐你从DVD安装。同时，上网搜索“安装xcode”来指导你来安装它。</p><p>一旦你安装完XCode，可能需要重启你的电脑。你可以找到你的终端程序并且将它放到快捷启动栏中。在本书中你会经常用到终端，所以最好将它放到顺手的区域。</p><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>对于Windows用户，你需要在虚拟机中安装并运行一个基本的Ubuntu Linux系统，来做本书的练习，并且避免任何Windows中安装的问题。</p><blockquote><p>译者注：如果你的Windows版本是Win10 14316及之后的版本，可以开启Ubuntu子系统来获取Linux环境。</p></blockquote><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><p>对于程序员来说，文本编辑器的选择有些困难。对于初学者我推荐他们使用<a href="http://projects.gnome.org/gedit/"><code>Gedit</code></a>，因为它很简单，并且可以用于编写代码。然而，它在特定的国际化环境中并不能正常工作。如果你已经是老司机的话，你可以选用你最喜欢的编辑器。</p><p>出于这种考虑，我打算让你尝试一些你所在平台上的标准的用于编程的文本编辑器，并且长期使用其中你最喜欢的一个。如果你已经用了Gedit并且很喜欢他，那么就一致用下去。如果你打算尝试一些不同的编辑器，则赶快尝试并选择一个。</p><p>最重要的事情是，不要纠结于寻找最完美的编辑器。文本编辑器几乎都很奇怪，你只需要选择一个并熟悉它，如果你发现喜欢别的编辑器可以切换到它。不要在挑选它和把它变得更好上面花很多时间。</p><p>这是亦可以尝试的一些编辑器：</p><ul><li>Linux和OSX上的<a href="http://projects.gnome.org/gedit/"><code>Gedit</code></a>。</li><li>OSX上的<a href="http://www.barebones.com/products/textwrangler/"><code>TextWrangler</code></a>。</li><li>可以在终端中运行并几乎在任何地方工作的<a href="http://www.nano-editor.org/"><code>Nano</code></a>。</li><li><a href="http://www.gnu.org/software/emacs/"><code>Emacs</code></a>和<a href="http://emacsformacosx.com/"><code>Emacs OSX</code></a>。需要学习一些东西。</li><li><a href="http://www.vim.org/"><code>Vim</code></a>和<a href="http://code.google.com/p/macvim/"><code>Mac Vim</code></a>。</li></ul><p>每个人都可能选择一款不同的编辑器，这些只是一部分人所选择的开源编辑器。在找到你最喜欢的那个之前，尝试其中的一些，甚至是一些商业编辑器。</p><h2 id="警告：不要使用IDE"><a href="#警告：不要使用IDE" class="headerlink" title="警告：不要使用IDE"></a>警告：不要使用IDE</h2><p>IDE，或者“集成开发工具”，会使你变笨。如果你想要成为一个好的程序员，它会是最糟糕的工具，因为它隐藏了背后的细节，你的工作是弄清楚背后发生了什么。如果你试着完成一些事情，并且所在平台根据特定的IDE而设计，它们非常有用，但是对于学习C编程（以及许多其它语言），它们没有意义。</p><blockquote><p>注</p></blockquote><blockquote><p>如果你玩过吉他，你应该知道TAB是什么。但是对于其它人，让我对其做个解释。在音乐中有一种乐谱叫做“五线谱”。它是通用、非常古老的乐谱，以一种通用的方法来记下其它人应该在乐器上弹奏的音符。如果你弹过钢琴，这种乐谱非常易于使用，因为它几乎就是为钢琴和交响乐发明的。</p></blockquote><blockquote><p>然而吉他是一种奇怪的乐器，它并不能很好地适用这种乐谱。所以吉他手通常使用一种叫做TAB（tablature）的乐谱。它所做的不是告诉你该弹奏哪个音符，而是在当时应该拨哪根弦。你完全可以在不知道所弹奏的单个音符的情况下学习整首乐曲，许多人也都是这么做的，但是如果你想知道你弹的是什么，TAB是毫无意义的。</p></blockquote><blockquote><p>传统的乐谱可能比TAB更难一些，但是会告诉你如何演奏音乐，而不是如果玩吉他。通过传统的乐谱我可以在钢琴上，或者在贝斯上弹奏相同的曲子。我也可以将它放到电脑中，为它设计全部的曲谱。但是通过TAB我只能在吉他上弹奏。</p></blockquote><blockquote><p>IDE就像是TAB，你可以用它非常快速地编程，但是你只能够用一种语言在一个平台上编程。这就是公司喜欢将它卖给你的原因。它们知道你比较懒，并且由于它只适用于它们自己的平台，他们就将你锁定在了那个平台上。</p></blockquote><blockquote><p>打破这一循环的办法就是不用IDE学习编程。一个普通的文本编辑器，或者一个程序员使用的文本编辑器，例如Vim或者Emacs，能让你更熟悉代码。这有一点点困难，但是终结果是你将会熟悉任何代码，在任何计算机上，以任何语言，并且懂得背后的原理。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Learn-C-the-Hard-Way</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learn-C-the-Hard-Way</title>
    <link href="/2023/08/15/Learn-C-the-Hard-Way/"/>
    <url>/2023/08/15/Learn-C-the-Hard-Way/</url>
    
    <content type="html"><![CDATA[<ul><li><a href="README.md">笨办法学C 中文版</a></li><li><a href="preface.md">前言</a></li><li><a href="introduction.md">导言：C的笛卡尔之梦</a></li><li><a href="ex0.md">练习0：准备</a></li><li><a href="ex1.md">练习1：启用编译器</a></li><li><a href="ex2.md">练习2：用Make来代替Python</a></li><li><a href="ex3.md">练习3：格式化输出</a></li><li><a href="ex4.md">练习4：Valgrind 介绍</a></li><li><a href="ex5.md">练习5：一个C程序的结构</a></li><li><a href="ex6.md">练习6：变量类型</a></li><li><a href="ex7.md">练习7：更多变量和一些算术</a></li><li><a href="ex8.md">练习8：大小和数组</a></li><li><a href="ex9.md">练习9：数组和字符串</a></li><li><a href="ex10.md">练习10：字符串数组和循环</a></li><li><a href="ex11.md">练习11：While循环和布尔表达式</a></li><li><a href="ex12.md">练习12：If，Else If，Else</a></li><li><a href="ex13.md">练习13：Switch语句</a></li><li><a href="ex14.md">练习14：编写并使用函数</a></li><li><a href="ex15.md">练习15：指针，可怕的指针</a></li><li><a href="ex16.md">练习16：结构体和指向它们的指针</a></li><li><a href="ex17.md">练习17：堆和栈的内存分配</a></li><li><a href="ex18.md">练习18：函数指针</a></li><li><a href="ex19.md">练习19：一个简单的对象系统</a></li><li><a href="ex20.md">练习20：Zed的强大的调试宏</a></li><li><a href="ex21.md">练习21：高级数据类型和控制结构</a></li><li><a href="ex22.md">练习22：栈、作用域和全局</a></li><li><a href="ex23.md">练习23：认识达夫设备</a></li><li><a href="ex24.md">练习24：输入输出和文件</a></li><li><a href="ex25.md">练习25：变参函数</a></li><li><a href="ex26.md">练习26：编写第一个真正的程序</a></li><li><a href="ex27.md">练习27：创造性和防御性编程</a></li><li><a href="ex28.md">练习28：Makefile 进阶</a></li><li><a href="ex29.md">练习29：库和链接</a></li><li><a href="ex30.md">练习30：自动化测试</a></li><li><a href="ex31.md">练习31：代码调试</a></li><li><a href="ex32.md">练习32：双向链表</a></li><li><a href="ex33.md">练习33：链表算法</a></li><li><a href="ex34.md">练习34：动态数组</a></li><li><a href="ex35.md">练习35：排序和搜索</a></li><li><a href="ex36.md">练习36：更安全的字符串</a></li><li><a href="ex37.md">练习37：哈希表</a></li><li><a href="ex38.md">练习38：哈希算法</a></li><li><a href="ex39.md">练习39：字符串算法</a></li><li><a href="ex40.md">练习40：二叉搜索树</a></li><li><a href="ex41.md">练习41：将 Cachegrind 和 Callgrind 用于性能调优</a></li><li><a href="ex42.md">练习42：栈和队列</a></li><li><a href="ex43.md">练习43：一个简单的统计引擎</a></li><li><a href="ex44.md">练习44：环形缓冲区</a></li><li><a href="ex45.md">练习45：一个简单的TCP&#x2F;IP客户端</a></li><li><a href="ex46.md">练习46：三叉搜索树</a></li><li><a href="ex47.md">练习47：一个快速的URL路由</a></li><li><a href="postscript.md">后记：“解构 K&amp;R C” 已死</a></li><li><a href="donors.md">捐赠名单</a></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Learn-C-the-Hard-Way</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/15/HelloWorld/"/>
    <url>/2023/08/15/HelloWorld/</url>
    
    <content type="html"><![CDATA[<h2 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h2><p>这个网页建立于23&#x2F;8&#x2F;14&#x2F;1:50<br><br>我将会在这里上传我自己写的blog<br><br>我也会在这里上传一些我以前写的blog，只有常查阅的blog才会上传到这里<br>转载，引用请标明出处<br><br>同理我也会在这个网页上标明我的引用和转载<br></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hello World</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
